generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  INTERN
  RECRUITER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  User               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id            String          @id @default(cuid())
  category      String          @db.VarChar(100)
  Post_category Post_category[]

  @@index([id], map: "idx_categoryid")
}

model Post {
  id             String          @id @default(cuid())
  userid         String          
  title          String          @db.VarChar(200)
  descriptions   String
  job_type       String          @db.VarChar(25)
  salary         Decimal         @db.Decimal
  job_experience Decimal         @db.Decimal
  User           User            @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Post_category  Post_category[]

  @@index([id], map: "idx_postid")
}

model Post_category {
  postid      String   
  category_id String  
  Category    Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Post        Post     @relation(fields: [postid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postid, category_id], map: "post_category_pkey")
  @@index([category_id], map: "idx_p_categoryid")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(INTERN)
  Account       Account[]
  Post          Post[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


